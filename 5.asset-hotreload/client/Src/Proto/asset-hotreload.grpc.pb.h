// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: asset-hotreload.proto
// Original file comments:
// バージョン 
#ifndef GRPC_asset_2dhotreload_2eproto__INCLUDED
#define GRPC_asset_2dhotreload_2eproto__INCLUDED

#include "asset-hotreload.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

// パッケージ 
//
// インポート 
//
// サービス 
class HotReloadService final {
 public:
  static constexpr char const* service_full_name() {
    return "HotReloadService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RPC 
    virtual ::grpc::Status GetFilePath(::grpc::ClientContext* context, const ::Request& request, ::FilePath* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>> AsyncGetFilePath(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>>(AsyncGetFilePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>> PrepareAsyncGetFilePath(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>>(PrepareAsyncGetFilePathRaw(context, request, cq));
    }
    virtual ::grpc::Status HotReload(::grpc::ClientContext* context, const ::Request& request, ::Successed* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Successed>> AsyncHotReload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Successed>>(AsyncHotReloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Successed>> PrepareAsyncHotReload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Successed>>(PrepareAsyncHotReloadRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RPC 
      virtual void GetFilePath(::grpc::ClientContext* context, const ::Request* request, ::FilePath* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFilePath(::grpc::ClientContext* context, const ::Request* request, ::FilePath* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void HotReload(::grpc::ClientContext* context, const ::Request* request, ::Successed* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HotReload(::grpc::ClientContext* context, const ::Request* request, ::Successed* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>* AsyncGetFilePathRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FilePath>* PrepareAsyncGetFilePathRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Successed>* AsyncHotReloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Successed>* PrepareAsyncHotReloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetFilePath(::grpc::ClientContext* context, const ::Request& request, ::FilePath* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FilePath>> AsyncGetFilePath(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FilePath>>(AsyncGetFilePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FilePath>> PrepareAsyncGetFilePath(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FilePath>>(PrepareAsyncGetFilePathRaw(context, request, cq));
    }
    ::grpc::Status HotReload(::grpc::ClientContext* context, const ::Request& request, ::Successed* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Successed>> AsyncHotReload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Successed>>(AsyncHotReloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Successed>> PrepareAsyncHotReload(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Successed>>(PrepareAsyncHotReloadRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetFilePath(::grpc::ClientContext* context, const ::Request* request, ::FilePath* response, std::function<void(::grpc::Status)>) override;
      void GetFilePath(::grpc::ClientContext* context, const ::Request* request, ::FilePath* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HotReload(::grpc::ClientContext* context, const ::Request* request, ::Successed* response, std::function<void(::grpc::Status)>) override;
      void HotReload(::grpc::ClientContext* context, const ::Request* request, ::Successed* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::FilePath>* AsyncGetFilePathRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FilePath>* PrepareAsyncGetFilePathRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Successed>* AsyncHotReloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Successed>* PrepareAsyncHotReloadRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetFilePath_;
    const ::grpc::internal::RpcMethod rpcmethod_HotReload_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RPC 
    virtual ::grpc::Status GetFilePath(::grpc::ServerContext* context, const ::Request* request, ::FilePath* response);
    virtual ::grpc::Status HotReload(::grpc::ServerContext* context, const ::Request* request, ::Successed* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFilePath() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilePath(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::FilePath>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HotReload() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHotReload(::grpc::ServerContext* context, ::Request* request, ::grpc::ServerAsyncResponseWriter< ::Successed>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetFilePath<WithAsyncMethod_HotReload<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFilePath() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::Request, ::FilePath>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Request* request, ::FilePath* response) { return this->GetFilePath(context, request, response); }));}
    void SetMessageAllocatorFor_GetFilePath(
        ::grpc::MessageAllocator< ::Request, ::FilePath>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Request, ::FilePath>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilePath(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HotReload() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::Request, ::Successed>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Request* request, ::Successed* response) { return this->HotReload(context, request, response); }));}
    void SetMessageAllocatorFor_HotReload(
        ::grpc::MessageAllocator< ::Request, ::Successed>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Request, ::Successed>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HotReload(
      ::grpc::CallbackServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetFilePath<WithCallbackMethod_HotReload<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFilePath() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HotReload() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFilePath() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFilePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HotReload() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHotReload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFilePath() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFilePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFilePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HotReload() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HotReload(context, request, response); }));
    }
    ~WithRawCallbackMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HotReload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFilePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFilePath() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Request, ::FilePath>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Request, ::FilePath>* streamer) {
                       return this->StreamedGetFilePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFilePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFilePath(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::FilePath* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFilePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::FilePath>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HotReload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HotReload() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Request, ::Successed>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Request, ::Successed>* streamer) {
                       return this->StreamedHotReload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HotReload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HotReload(::grpc::ServerContext* /*context*/, const ::Request* /*request*/, ::Successed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHotReload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Request,::Successed>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetFilePath<WithStreamedUnaryMethod_HotReload<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetFilePath<WithStreamedUnaryMethod_HotReload<Service > > StreamedService;
};


#endif  // GRPC_asset_2dhotreload_2eproto__INCLUDED
