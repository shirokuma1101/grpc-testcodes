// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uid-manager.proto

#include "uid-manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr RequestUidPoolSize::RequestUidPoolSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : size_(uint64_t{0u}){}
struct RequestUidPoolSizeDefaultTypeInternal {
  constexpr RequestUidPoolSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestUidPoolSizeDefaultTypeInternal() {}
  union {
    RequestUidPoolSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestUidPoolSizeDefaultTypeInternal _RequestUidPoolSize_default_instance_;
constexpr ResponseUidPool::ResponseUidPool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_uid_(uint64_t{0u})
  , end_uid_(uint64_t{0u}){}
struct ResponseUidPoolDefaultTypeInternal {
  constexpr ResponseUidPoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseUidPoolDefaultTypeInternal() {}
  union {
    ResponseUidPool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseUidPoolDefaultTypeInternal _ResponseUidPool_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uid_2dmanager_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_uid_2dmanager_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uid_2dmanager_2eproto = nullptr;

const uint32_t TableStruct_uid_2dmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestUidPoolSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestUidPoolSize, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResponseUidPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResponseUidPool, start_uid_),
  PROTOBUF_FIELD_OFFSET(::ResponseUidPool, end_uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RequestUidPoolSize)},
  { 7, -1, -1, sizeof(::ResponseUidPool)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestUidPoolSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ResponseUidPool_default_instance_),
};

const char descriptor_table_protodef_uid_2dmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021uid-manager.proto\"\"\n\022RequestUidPoolSiz"
  "e\022\014\n\004size\030\001 \001(\006\"5\n\017ResponseUidPool\022\021\n\tst"
  "art_uid\030\001 \001(\006\022\017\n\007end_uid\030\002 \001(\0062C\n\nUidSer"
  "vice\0225\n\nGetUidPool\022\023.RequestUidPoolSize\032"
  "\020.ResponseUidPool\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uid_2dmanager_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uid_2dmanager_2eproto = {
  false, false, 187, descriptor_table_protodef_uid_2dmanager_2eproto, "uid-manager.proto", 
  &descriptor_table_uid_2dmanager_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_uid_2dmanager_2eproto::offsets,
  file_level_metadata_uid_2dmanager_2eproto, file_level_enum_descriptors_uid_2dmanager_2eproto, file_level_service_descriptors_uid_2dmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_uid_2dmanager_2eproto_getter() {
  return &descriptor_table_uid_2dmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_uid_2dmanager_2eproto(&descriptor_table_uid_2dmanager_2eproto);

// ===================================================================

class RequestUidPoolSize::_Internal {
 public:
};

RequestUidPoolSize::RequestUidPoolSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:RequestUidPoolSize)
}
RequestUidPoolSize::RequestUidPoolSize(const RequestUidPoolSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:RequestUidPoolSize)
}

inline void RequestUidPoolSize::SharedCtor() {
size_ = uint64_t{0u};
}

RequestUidPoolSize::~RequestUidPoolSize() {
  // @@protoc_insertion_point(destructor:RequestUidPoolSize)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestUidPoolSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestUidPoolSize::ArenaDtor(void* object) {
  RequestUidPoolSize* _this = reinterpret_cast< RequestUidPoolSize* >(object);
  (void)_this;
}
void RequestUidPoolSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestUidPoolSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestUidPoolSize::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestUidPoolSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestUidPoolSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestUidPoolSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestUidPoolSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestUidPoolSize)
  return target;
}

size_t RequestUidPoolSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestUidPoolSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestUidPoolSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestUidPoolSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestUidPoolSize::GetClassData() const { return &_class_data_; }

void RequestUidPoolSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestUidPoolSize *>(to)->MergeFrom(
      static_cast<const RequestUidPoolSize &>(from));
}


void RequestUidPoolSize::MergeFrom(const RequestUidPoolSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestUidPoolSize)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestUidPoolSize::CopyFrom(const RequestUidPoolSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestUidPoolSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUidPoolSize::IsInitialized() const {
  return true;
}

void RequestUidPoolSize::InternalSwap(RequestUidPoolSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUidPoolSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uid_2dmanager_2eproto_getter, &descriptor_table_uid_2dmanager_2eproto_once,
      file_level_metadata_uid_2dmanager_2eproto[0]);
}

// ===================================================================

class ResponseUidPool::_Internal {
 public:
};

ResponseUidPool::ResponseUidPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ResponseUidPool)
}
ResponseUidPool::ResponseUidPool(const ResponseUidPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_uid_, &from.start_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_uid_) -
    reinterpret_cast<char*>(&start_uid_)) + sizeof(end_uid_));
  // @@protoc_insertion_point(copy_constructor:ResponseUidPool)
}

inline void ResponseUidPool::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_uid_) -
    reinterpret_cast<char*>(&start_uid_)) + sizeof(end_uid_));
}

ResponseUidPool::~ResponseUidPool() {
  // @@protoc_insertion_point(destructor:ResponseUidPool)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseUidPool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResponseUidPool::ArenaDtor(void* object) {
  ResponseUidPool* _this = reinterpret_cast< ResponseUidPool* >(object);
  (void)_this;
}
void ResponseUidPool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseUidPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseUidPool::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponseUidPool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_uid_) -
      reinterpret_cast<char*>(&start_uid_)) + sizeof(end_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseUidPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 start_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          start_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 end_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          end_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseUidPool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResponseUidPool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 start_uid = 1;
  if (this->_internal_start_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_start_uid(), target);
  }

  // fixed64 end_uid = 2;
  if (this->_internal_end_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_end_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseUidPool)
  return target;
}

size_t ResponseUidPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponseUidPool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 start_uid = 1;
  if (this->_internal_start_uid() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 end_uid = 2;
  if (this->_internal_end_uid() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseUidPool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseUidPool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseUidPool::GetClassData() const { return &_class_data_; }

void ResponseUidPool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseUidPool *>(to)->MergeFrom(
      static_cast<const ResponseUidPool &>(from));
}


void ResponseUidPool::MergeFrom(const ResponseUidPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponseUidPool)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start_uid() != 0) {
    _internal_set_start_uid(from._internal_start_uid());
  }
  if (from._internal_end_uid() != 0) {
    _internal_set_end_uid(from._internal_end_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseUidPool::CopyFrom(const ResponseUidPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponseUidPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUidPool::IsInitialized() const {
  return true;
}

void ResponseUidPool::InternalSwap(ResponseUidPool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseUidPool, end_uid_)
      + sizeof(ResponseUidPool::end_uid_)
      - PROTOBUF_FIELD_OFFSET(ResponseUidPool, start_uid_)>(
          reinterpret_cast<char*>(&start_uid_),
          reinterpret_cast<char*>(&other->start_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseUidPool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_uid_2dmanager_2eproto_getter, &descriptor_table_uid_2dmanager_2eproto_once,
      file_level_metadata_uid_2dmanager_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RequestUidPoolSize* Arena::CreateMaybeMessage< ::RequestUidPoolSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestUidPoolSize >(arena);
}
template<> PROTOBUF_NOINLINE ::ResponseUidPool* Arena::CreateMaybeMessage< ::ResponseUidPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResponseUidPool >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
