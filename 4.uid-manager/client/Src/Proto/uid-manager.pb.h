// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uid-manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uid_2dmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uid_2dmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uid_2dmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uid_2dmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uid_2dmanager_2eproto;
class RequestUidPoolSize;
struct RequestUidPoolSizeDefaultTypeInternal;
extern RequestUidPoolSizeDefaultTypeInternal _RequestUidPoolSize_default_instance_;
class ResponseUidPool;
struct ResponseUidPoolDefaultTypeInternal;
extern ResponseUidPoolDefaultTypeInternal _ResponseUidPool_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RequestUidPoolSize* Arena::CreateMaybeMessage<::RequestUidPoolSize>(Arena*);
template<> ::ResponseUidPool* Arena::CreateMaybeMessage<::ResponseUidPool>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RequestUidPoolSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestUidPoolSize) */ {
 public:
  inline RequestUidPoolSize() : RequestUidPoolSize(nullptr) {}
  ~RequestUidPoolSize() override;
  explicit constexpr RequestUidPoolSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestUidPoolSize(const RequestUidPoolSize& from);
  RequestUidPoolSize(RequestUidPoolSize&& from) noexcept
    : RequestUidPoolSize() {
    *this = ::std::move(from);
  }

  inline RequestUidPoolSize& operator=(const RequestUidPoolSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUidPoolSize& operator=(RequestUidPoolSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestUidPoolSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestUidPoolSize* internal_default_instance() {
    return reinterpret_cast<const RequestUidPoolSize*>(
               &_RequestUidPoolSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestUidPoolSize& a, RequestUidPoolSize& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUidPoolSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestUidPoolSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestUidPoolSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestUidPoolSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestUidPoolSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestUidPoolSize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUidPoolSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestUidPoolSize";
  }
  protected:
  explicit RequestUidPoolSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // fixed64 size = 1;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:RequestUidPoolSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uid_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class ResponseUidPool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ResponseUidPool) */ {
 public:
  inline ResponseUidPool() : ResponseUidPool(nullptr) {}
  ~ResponseUidPool() override;
  explicit constexpr ResponseUidPool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseUidPool(const ResponseUidPool& from);
  ResponseUidPool(ResponseUidPool&& from) noexcept
    : ResponseUidPool() {
    *this = ::std::move(from);
  }

  inline ResponseUidPool& operator=(const ResponseUidPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseUidPool& operator=(ResponseUidPool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseUidPool& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseUidPool* internal_default_instance() {
    return reinterpret_cast<const ResponseUidPool*>(
               &_ResponseUidPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseUidPool& a, ResponseUidPool& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseUidPool* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseUidPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseUidPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseUidPool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseUidPool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseUidPool& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseUidPool* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ResponseUidPool";
  }
  protected:
  explicit ResponseUidPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartUidFieldNumber = 1,
    kEndUidFieldNumber = 2,
  };
  // fixed64 start_uid = 1;
  void clear_start_uid();
  uint64_t start_uid() const;
  void set_start_uid(uint64_t value);
  private:
  uint64_t _internal_start_uid() const;
  void _internal_set_start_uid(uint64_t value);
  public:

  // fixed64 end_uid = 2;
  void clear_end_uid();
  uint64_t end_uid() const;
  void set_end_uid(uint64_t value);
  private:
  uint64_t _internal_end_uid() const;
  void _internal_set_end_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ResponseUidPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t start_uid_;
  uint64_t end_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_uid_2dmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestUidPoolSize

// fixed64 size = 1;
inline void RequestUidPoolSize::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t RequestUidPoolSize::_internal_size() const {
  return size_;
}
inline uint64_t RequestUidPoolSize::size() const {
  // @@protoc_insertion_point(field_get:RequestUidPoolSize.size)
  return _internal_size();
}
inline void RequestUidPoolSize::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void RequestUidPoolSize::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:RequestUidPoolSize.size)
}

// -------------------------------------------------------------------

// ResponseUidPool

// fixed64 start_uid = 1;
inline void ResponseUidPool::clear_start_uid() {
  start_uid_ = uint64_t{0u};
}
inline uint64_t ResponseUidPool::_internal_start_uid() const {
  return start_uid_;
}
inline uint64_t ResponseUidPool::start_uid() const {
  // @@protoc_insertion_point(field_get:ResponseUidPool.start_uid)
  return _internal_start_uid();
}
inline void ResponseUidPool::_internal_set_start_uid(uint64_t value) {
  
  start_uid_ = value;
}
inline void ResponseUidPool::set_start_uid(uint64_t value) {
  _internal_set_start_uid(value);
  // @@protoc_insertion_point(field_set:ResponseUidPool.start_uid)
}

// fixed64 end_uid = 2;
inline void ResponseUidPool::clear_end_uid() {
  end_uid_ = uint64_t{0u};
}
inline uint64_t ResponseUidPool::_internal_end_uid() const {
  return end_uid_;
}
inline uint64_t ResponseUidPool::end_uid() const {
  // @@protoc_insertion_point(field_get:ResponseUidPool.end_uid)
  return _internal_end_uid();
}
inline void ResponseUidPool::_internal_set_end_uid(uint64_t value) {
  
  end_uid_ = value;
}
inline void ResponseUidPool::set_end_uid(uint64_t value) {
  _internal_set_end_uid(value);
  // @@protoc_insertion_point(field_set:ResponseUidPool.end_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uid_2dmanager_2eproto
